You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
```class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
       // ListNode* first=l1;
        //ListNode* second=l2;
        ListNode* res=NULL;
        ListNode*temp;
        ListNode* prev=NULL;
        int sum=0,carry=0;
        while(l1!=NULL||l2!=NULL)
        {
            sum=carry+(l1?l1->val:0)+(l2?l2->val:0);
            carry=(sum>=10?1:0);
            sum%=10;
            temp=new ListNode(sum);
            if(res==NULL)
              res=temp;
             else
                 prev->next=temp;
                prev=temp;
            if(l1)
                l1=l1->next;
            if(l2)
                l2=l2->next;
        }
        if(carry>0)
        {
            temp=new ListNode(carry);
            prev->next=temp;
        }
        
        return res;
        }
};
                                  ```
